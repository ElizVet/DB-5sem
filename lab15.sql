-- GO TO THE SEK_TO_SEK_PDB

-- 1 create table
create table trigger_table ( 
    num int primary key, 
    str nvarchar2(20)
    );

-- 2 insert
insert into trigger_table values (1, 'str 1');
insert into trigger_table values (2, 'str 2');
insert into trigger_table values (3, 'str 3');
insert into trigger_table values (4, 'str 4');
insert into trigger_table values (5, 'str 5');
insert into trigger_table values (6, 'str 6');
insert into trigger_table values (7, 'str 7');
insert into trigger_table values (8, 'str 8');
insert into trigger_table values (9, 'str 9');
insert into trigger_table values (10, 'str 10');
commit;
select * from trigger_table;

-- 3,4,6 BEFORE-trigger insert or update or delete
create or replace trigger trigger_table_before
before insert or update or delete on trigger_table
    begin
        if inserting then
            dbms_output.put_line('tt_before_insert');
        elsif updating then
            dbms_output.put_line('tt_before_update');
        elsif deleting then
            dbms_output.put_line('tt_before_delete');
        end if;
    end;
    
-- 5 BEFORE-trigger with for each row
create or replace trigger trigger_table_before_row
before insert or update or delete on trigger_table
for each row
    begin
        if inserting then
            dbms_output.put_line('tt_before_insert_row');
        elsif updating then
            dbms_output.put_line('tt_before_update_row');
        elsif deleting then
            dbms_output.put_line('tt_before_delete_row');
        end if;
    end;

-- 7 AFTER-trigger insert or update or delete
create or replace trigger trigger_table_after
after insert or update or delete on trigger_table
    begin
        if inserting then
            dbms_output.put_line('tt_after_insert');
        elsif updating then
            dbms_output.put_line('tt_after_update');
        elsif deleting then
            dbms_output.put_line('tt_after_delete');
        end if;
    end;


-- 8 AFTER-trigger with for each row
create or replace trigger trigger_table_after_row
after insert or update or delete on trigger_table
for each row
    begin
        if inserting then
            dbms_output.put_line('tt_after_insert_row');
        elsif updating then
            dbms_output.put_line('tt_after_update_row');
        elsif deleting then
            dbms_output.put_line('tt_after_delete_row');
        end if;
    end;


----------------------- DEMONSTRATION -----------------------
select * from user_triggers;
begin
    insert into trigger_table values (13, 'str 12');
end;
-------------------------------------------------------------

-- 9 create table AUDIT
create table table_audit (
    id int generated by default as identity,
    TriggerName nvarchar2(30),
    OperationDate timestamp default(sysdate),
    OperationType nvarchar2(30),
    Data nvarchar2(150), 
    primary key(id)
    );

-- 10 edit triggers for table_audit
    
-- BEFORE-trigger with for each row
create or replace trigger trigger_table_before_row_INTO_table_audit
before insert or update or delete on trigger_table
for each row
    begin
        if inserting then
            dbms_output.put_line('tt_before_insert_row');
            insert into table_audit (TriggerName, OperationType, Data) values 
            ('trigger_table_before_row_INTO_table_audit', 
            'inserting', 
            :new.str || ' ' || :new.num);
        elsif updating then
            dbms_output.put_line('tt_before_update_row');
            insert into TABLE_AUDIT (TriggerName, OperationType, Data) values 
            ('trigger_table_before_row_INTO_table_audit', 
            'updating', 
            :old.str || ' ' || :old.num || ' -> ' || :new.str || ' ' || :new.num);
        elsif deleting then
            dbms_output.put_line('tt_before_delete_row');
            insert into TABLE_AUDIT (TriggerName, OperationType, Data) values 
            ('trigger_table_before_row_INTO_table_audit', 
            'deleting', 
            :old.str || ' ' || :old.num);
        end if;
    end;

-- 11 
select count(*) from table_audit;
insert into trigger_table(id) values (1); -- with error
select count(*) from table_audit; -- nothing

-- 12 drop table. what happened? 
begin
      drop table trigger_table;
      select count(*) from table_audit; -- no changes
      rollback;
end;

-- forbid deleting the table
create or replace trigger trigger_table_no_drop
before drop on database
begin
    if (UPPER(TRIM(ora_dict_obj_name)) = 'trigger_table')
    then 
        dbms_output.put_line('drop of trigger_table forbidden');
        RAISE_APPLICATION_ERROR(-20001,'Drop forbidden');
    end if;
end;

-- check
drop table trigger_table;

-- 13 drop audit. go triggers. what happened?
drop table table_audit;
-- triggers don't work, but don't raise errors either;
rollback;

-- 14 create view. create instead of insert trigger.
create or replace view trigger_table_view as 
select * from trigger_table;

create or replace trigger trigger_table_view_instead_of_insert
instead of insert on trigger_table_view -- instead of can only be applied to view, but not table
for each row -- default, only for each row allowed
begin
    dbms_output.put_line('insert_tt_view');
    insert into trigger_table(num, str) values (:new.str, :new.num);
end;

commit;

begin
      insert into trigger_table_view(num, str) values (33, 'str 33');
      select * from trigger_table where str = 'cat';
      commit;
end;








