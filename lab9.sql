-- 1
--user C##SEK already can create table, view, procedure
select * from dba_sys_privs where grantee = 'C##RL_SEKCORE';

-- -- grant user C##SEK the necessary rights
grant 
  create sequence, 
  create cluster
to C##SEKCORE;

grant create synonym to C##SEKCORE;
grant create public synonym to C##SEKCORE;

grant create materialized view to C##SEKCORE;
grant create query to C##SEKCORE;

--------------- CREATE SEQUENCES ---------------
-- 2

create sequence S1
  increment by 10
  start with 1000
  nomaxvalue
  nominvalue
  nocycle
  nocache   --cache 20
  noorder;  --order (the chronology of values is not guaranteed)
  
select s1.currval, s1.nextval from dual;





  -- 3
  create sequence S2
    increment by 10
    start with 10
    maxvalue 100
    nominvalue
    nocycle;
    
select s2.currval, s2.nextval from dual;





-- 4
create sequence S3
  increment by -10
  start with 10
  maxvalue 20  --START WITH cannot be more than MAXVALUE
  minvalue -100
  nocycle
  order;
  
select S3.nextval from dual;




-- 5
create sequence S4
  increment by 1
  start with 1
  maxvalue 10 --CYCLE must specify MAXVALUE
  cycle
  cache 5
  noorder;
  
select S4.nextval from dual;





-- 6 list of all sequences in the database dictionary with this user
select * from user_sequences;

select * from sys.dba_sequences where sequence_owner = 'C##SEKCORE';

drop sequence S1;
drop sequence S2;
drop sequence S3;
drop sequence S4;
    
--------------- TABLES ---------------
select * from user_tablespaces;


-- 7 
create table T1 
  (
   N1 NUMBER(20), 
   N2 NUMBER(20), 
   N3 NUMBER(20), 
   N4 NUMBER(20)
  ) storage(buffer_pool KEEP)
    tablespace TS_SEK;      --tablespace for permanent data
    
insert into T1 values (S1.nextval, S2.nextval, S3.nextval, S4.nextval);

select * from T1;



--------------- CLUSTERS ---------------

-- 8
create cluster ABC        --hash-type
  (
    X NUMBER (10),
    V VARCHAR2 (12)
  ) hashkeys 200    --specifies and limits the number of unique hash values that can be generated by the hash function.
    tablespace TS_SEK;
  
  
alter user C##SEKCORE
  default tablespace TS_SEK quota 5m on TS_SEK;
  
  
  
  
  -- 9
create table A
  (
    XA NUMBER (10),
    VA VARCHAR2 (12),
    AA int
  ) cluster ABC (XA, VA);
  
  
  
  
  -- 10
create table B
  (
    XB NUMBER (10),
    VB VARCHAR2 (12),
    BB int
  ) cluster ABC (XB, VB);
  
  
  
  
  -- 11
create table C
  (
    XC NUMBER (10),
    VC VARCHAR2 (12),
    CC int
  ) cluster ABC (XC, VC);
  
  
  -- 12
--find created tables and clusters in dictionaries Oracle
--dba_clusters
--dba_tables

select cluster_name, owner, tablespace_name, cluster_type, cache from dba_clusters;

select * from dba_tables where table_name = 'A' OR table_name = 'B' OR table_name = 'C';

select * from user_clusters;
select * from user_tables;




--------------- SYNONYMS ---------------

-- 13 private synonym
create synonym SYN_C for C;

select * from SYN_C;

drop synonym SYN_C;

-- 14 public synonym
create public synonym PUBL_SYN_B for B;

select * from PUBL_SYN_B;

drop synonym PUBL_SYN_B;


select * from user_synonyms;




-- 15
create table AA 
  (
    X number (10),
    V varchar2 (12),
    constraint X_PK primary key (X)
  );
  
insert into AA (X, V) values (1, 'one');
insert into AA (X, V) values (2, 'two');
insert into AA (X, V) values (3, 'three');
insert into AA (X, V) values (4, 'four');
insert into AA (X, V) values (5, 'five');

select * from AA;
--------------
create table BB
  (
    XX NUMBER (10),
    VV VARCHAR2 (12),
    constraint XX_PK foreign key (XX) references AA(X)
  );
  
insert into BB (XX, VV) values (1, 'odin');
insert into BB (XX, VV) values (2, 'dva');
insert into BB (XX, VV) values (3, 'tri');
insert into BB (XX, VV) values (4, 'chetyre');
insert into BB (XX, VV) values (5, 'pyat');

select * from BB
------------------

create view V1
as select AA.X, AA.V, BB.VV
from AA inner join BB on AA.X = BB.XX;

select * from V1;

    
-- 16 materialized view
create materialized view MV
  build immediate         --create view in moment of operator's executing
  refresh complete        --fast / copmlete / force(default)
  start with sysdate      --show when execute first time
  next sysdate + numtodsinterval (2, 'MINUTE')     --show when execute next time
  as select AA.X, AA.V, BB.VV
  from AA
  inner join BB on AA.X = BB.XX
  
select * from MV;

drop materialized view;




